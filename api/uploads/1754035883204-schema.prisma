/**
 * ************************************************************
 * Datasource & generator
 * ************************************************************
 */
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/**
 * ************************************************************
 * ENUMS
 * ************************************************************
 */
enum Role {
  STUDENT
  MODERATOR
  TEACHER
  CREATOR
}

enum LessonCheckType {
  VIEW // –ø—Ä–æ—Å—Ç–æ ¬´–¥–∞–ª–µ–µ¬ª
  FILE // —Ñ–∞–π–ª‚Äë–∑–∞–¥–∞–Ω–∏–µ
  TEST // —Å–≤—è–∑–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç
}

enum LessonStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_REVIEW
  NEED_CLARIFY // —Å—Ç—É–¥–µ–Ω—Ç –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å
  NEED_REWORK // —É—á–∏—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É
  COMPLETED
}

enum TaskStatus {
  WAIT
  READY
  NEED_CLARIFY
  ON_CHECK
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELED
}

/**
 * ************************************************************
 * USERS, GROUPS
 * ************************************************************
 */
model User {
  id        BigInt @id @default(autoincrement())
  email     String @unique
  password  String
  firstName String
  lastName  String
  role      Role

  // relations
  groups        Membership[]
  lessonStates  LessonProgress[]
  tasks         Task[]
  notifications Notification[]
  payments      Payment[]        @relation("Buyer")

  fileUploads FileSubmission[] @relation("StudentFiles")
   lessonComments LessonComment[] @relation("UserToComments")

  /**
   * üîπ —É—á–∏—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª—ã
   */
  teacherChecks FileSubmission[] @relation("TeacherCheck")

  createdAt DateTime @default(now())
}

/**
 * —Å–≤—è–∑—å –º–Ω–æ–≥–∏–µ‚Äë–∫–æ‚Äë–º–Ω–æ–≥–∏–º User‚ÄìGroup + –¥–æ–ø.–ø–æ–ª–µ (certificate)
 */
model Group {
  id      BigInt       @id @default(autoincrement())
  name    String
  members Membership[]
  // lessons   Lesson[]  // –µ—Å–ª–∏ –±—É–¥—É—Ç –≥—Ä—É–ø–ø–æ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

  createdAt DateTime @default(now())
}

model Membership {
  userId      BigInt
  groupId     BigInt
  // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
  certificate String?

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@id([userId, groupId])
}

/**
 * ************************************************************
 * –ö–£–†–°–´  ‚Üí  –£–†–û–ö–ò  ‚Üí  –¢–ï–°–¢–´
 * ************************************************************
 */
model Course {
  id          BigInt   @id @default(autoincrement())
  title       String   @unique
  // DraftJS raw‚ÄëJSON –∏–ª–∏ Markdown ‚Üí TEXT
  description Json
  price       Int? // ‚ÇΩ, nullable = –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
  lessons     Lesson[]

  createdAt DateTime @default(now())
}

model Lesson {
  id        BigInt          @id @default(autoincrement())
  courseId  BigInt
  order     Int // –Ω–æ–º–µ—Ä –≤ –∫—É—Ä—Å–µ
  title     String
  content   Json // raw‚ÄëJSON
  checkType LessonCheckType
  testId    BigInt? // –µ—Å–ª–∏ checkType¬†= TEST

  submissions FileSubmission[] @relation("LessonFiles") // üîπ

  // relations
  course     Course           @relation(fields: [courseId], references: [id])
  test       Test?            @relation(fields: [testId], references: [id])
  progresses LessonProgress[]

  createdAt DateTime @default(now())

  @@unique([courseId, order]) // –æ–¥–∏–Ω –Ω–æ–º–µ—Ä –≤ —Ä–∞–º–∫–∞—Ö –∫—É—Ä—Å–∞

comments  LessonComment[] @relation("LessonToComments")


}

model Test {
  id        BigInt     @id @default(autoincrement())
  title     String
  questions Question[]
  lesson    Lesson[] // –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å

  createdAt DateTime @default(now())
}

model Question {
  id     BigInt @id @default(autoincrement())
  testId BigInt
  text   String
  type   String // 'one' | 'many'  (–º–æ–∂–Ω–æ Enum, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

  answers Answer[]
  test    Test     @relation(fields: [testId], references: [id])
}

model Answer {
  id         BigInt  @id @default(autoincrement())
  questionId BigInt
  text       String
  correct    Boolean @default(false)

  question Question @relation(fields: [questionId], references: [id])
}

/**
 * ************************************************************
 * –ü–†–û–ì–†–ï–°–°, –ó–ê–î–ê–ù–ò–Ø, –§–ê–ô–õ‚Äë–°–ê–ë–ú–ò–®–ù–´
 * ************************************************************
 */
model LessonProgress {
  userId   BigInt
  lessonId BigInt
  status   LessonStatus @default(NOT_STARTED)
  // —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Ç–µ—Å—Ç–∞ / –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Ç.–ø.
  meta     Json?

  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@id([userId, lessonId])
}

model Task {
  id          BigInt           @id @default(autoincrement())
  userId      BigInt
  title       String
  status      TaskStatus       @default(WAIT)
  description Json?
  files       FileSubmission[]

  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model FileSubmission {
  id BigInt @id @default(autoincrement())

  /**
   * üîπ –Ω–æ–≤–æ–µ: –∫ –∫–∞–∫–æ–º—É —É—Ä–æ–∫—É / –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–Ω–æ—Å–∏—Ç—Å—è
   */
  lessonId  BigInt
  studentId BigInt

  taskId    BigInt?
  filePath  String
  comment   String?
  teacherId BigInt?

  lesson  Lesson @relation("LessonFiles", fields: [lessonId], references: [id])
  student User   @relation("StudentFiles", fields: [studentId], references: [id])

  task    Task? @relation(fields: [taskId], references: [id])
  teacher User? @relation("TeacherCheck", fields: [teacherId], references: [id])

  createdAt DateTime @default(now())
}

/**
 * ************************************************************
 * –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
 * ************************************************************
 */
model Notification {
  id     BigInt  @id @default(autoincrement())
  userId BigInt
  title  String
  body   String
  read   Boolean @default(false)

  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}




/**
 * ************************************************************
 * –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
 * ************************************************************
 */


model LessonComment {
  id         BigInt   @id @default(autoincrement())
  lessonId   BigInt
  authorId   BigInt
  text       String
  createdAt  DateTime @default(now())

  lesson    Lesson   @relation("LessonToComments", fields: [lessonId], references: [id])
  author    User     @relation("UserToComments",       fields: [authorId], references: [id])

  @@index([lessonId])
}








/**
 * ************************************************************
 * –û–ü–õ–ê–¢–´ / –î–û–°–¢–£–ü–´
 * ************************************************************
 */
model Payment {
  id       BigInt        @id @default(autoincrement())
  buyerId  BigInt // Moderator (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è)
  quantity Int
  amount   Int // ‚ÇΩ
  status   PaymentStatus @default(PENDING)

  buyer     User     @relation("Buyer", fields: [buyerId], references: [id])
  createdAt DateTime @default(now())
}
