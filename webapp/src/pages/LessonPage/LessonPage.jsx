import { useParams, useNavigate } from 'react-router-dom';
import { useState } from 'react';
import styles from './LessonPage.module.css';

/* –¥–µ–º–æ‚Äë–¥–∞–Ω–Ω—ã–µ */
const lessons = {
  view: {
    title: '–í–≤–µ–¥–µ–Ω–∏–µ¬†(–ø—Ä–æ—Å–º–æ—Ç—Ä)',
    type: 'view',
    content: (
      <>
        <h4>–¢–µ–∫—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫</h4>
        <p>–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, –∫–∞–∫¬†—Ä–∞–±–æ—Ç–∞—é—Ç —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏‚Ä¶</p>
      </>
    ),
  },
  file: {
    title: '–í–≤–µ–¥–µ–Ω–∏–µ¬†(—Ñ–∞–π–ª)',
    type: 'file',
    content: (
      <>
        <p>–°–∫–∞—á–∞–π—Ç–µ –º–µ—Ç–æ–¥–∏—á–∫—É, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –∑–∞—Ç–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π PDF.</p>
        <a href="#" download>–°–∫–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ</a>
      </>
    ),
  },
  test: {
    title: '–í–≤–µ–¥–µ–Ω–∏–µ¬†(—Ç–µ—Å—Ç)',
    type: 'test',
    content: <p>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑¬†—á–µ—Ç—ã—Ä—ë—Ö.</p>,
    questions: [
      {
        id: 1,
        text: '–ß–∞—Ç‚ÄëGPT –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–ª–∞—Å—Å—É‚Ä¶',
        answers: [
          '–¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π',
          '–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π',
          '—Å–≤–µ—Ä—Ç–æ—á–Ω—ã—Ö —Å–µ—Ç–µ–π',
          '–±–∞–π–µ—Å–æ–≤—Å–∫–∏—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤',
        ],
        correct: 1,           // –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ
      },
    ],
  },
};

export default function LessonPage() {
  const { lessonId } = useParams();
  const navigate = useNavigate();
  const [file, setFile] = useState(null);
  const [chosen, setChosen] = useState({});
  const [questionIdx, setQuestionIdx] = useState(0);
  const [showModal, setShowModal] = useState(false);

  const lesson = lessons[lessonId] || { title: '–£—Ä–æ–∫', type: 'view', content: null };

  const handleNext = () => navigate(-1);        // –≤–µ—Ä–Ω—ë–º—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
  const handleFileSend = () => alert('–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
  const handleTestNext = () => {
    if (questionIdx < lesson.questions.length - 1) {
      setQuestionIdx((i) => i + 1);
    } else {
      alert('–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω üéâ');
      handleNext();
    }
  };

  const q = lesson.questions?.[questionIdx];

  return (
    <div className={styles.container}>
      <h2 className={styles.title}>{lesson.title}</h2>

      <div className={styles.content}>{lesson.content}</div>

      {/* –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å */}
      {lesson.type === 'view' && (
        <button className={styles.primary} onClick={handleNext}>
          –î–∞–ª–µ–µ
        </button>
      )}

      {lesson.type === 'file' && (
        <div className={styles.fileBlock}>
          <input
            id="file"
            type="file"
            onChange={(e) => setFile(e.target.files[0])}
          />
          <button
            className={styles.primary}
            disabled={!file}
            onClick={handleFileSend}
          >
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </button>
        </div>
      )}

      {lesson.type === 'test' && (
        <div className={styles.testBlock}>
          <p className={styles.counter}>
            {questionIdx + 1}/{lesson.questions.length}
          </p>
          <p className={styles.qtext}>{q.text}</p>
          <ul className={styles.answers}>
            {q.answers.map((a, i) => (
              <li key={i}>
                <label className={styles.radio}>
                  <input
                    type="radio"
                    name="ans"
                    checked={chosen[questionIdx] === i}
                    onChange={() =>
                      setChosen({ ...chosen, [questionIdx]: i })
                    }
                  />
                  {a}
                </label>
              </li>
            ))}
          </ul>
          <button
            className={styles.primary}
            disabled={chosen[questionIdx] == null}
            onClick={handleTestNext}
          >
            {questionIdx < lesson.questions.length - 1 ? '–î–∞–ª–µ–µ' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
          </button>
        </div>
      )}

      {/* —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å */}
      <button className={styles.link} onClick={() => setShowModal(true)}>
        –ó–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
      </button>

      {showModal && (
        <div className={styles.modalBackdrop} onClick={() => setShowModal(false)}>
          <div
            className={styles.modal}
            onClick={(e) => e.stopPropagation()}
          >
            <textarea
              placeholder="–í–∞—à –≤–æ–ø—Ä–æ—Å"
              rows="4"
              className={styles.textarea}
            />
            <input type="file" style={{ margin: '12px 0' }} />
            <div className={styles.mActions}>
              <button className={styles.primary} onClick={() => alert('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')}>
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å
              </button>
              <button className={styles.link} onClick={() => setShowModal(false)}>
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
